export interface IPackageJson {
    name: string;
    workspaces?: string[];
    dependencies?: Record<string, string>;
    devDependencies?: Record<string, string>;
    optionalDependencies?: Record<string, string>;
    peerDependencies?: Record<string, string>;
}
export interface IPackageEntry {
    name: string;
    manifest: IPackageJson;
    manifestPath: string;
    path: string;
    absPath: string;
    relPath: string;
}
export declare type ITopoOptions = Partial<ITopoOptionsNormalized>;
export declare type ITopoOptionsNormalized = {
    workspaces: string[];
    cwd: string;
    filter: (entry: IPackageEntry) => boolean;
};
export interface ITopoContext {
    packages: Record<string, IPackageEntry>;
    queue: string[];
    nodes: string[];
    edges: [string, string | undefined][];
    root: IPackageEntry;
}
export declare const getPackages: (options: ITopoOptionsNormalized) => Promise<Record<string, IPackageEntry>>;
export declare const getRootPackage: (cwd: string) => Promise<IPackageEntry>;
export declare const topo: (options?: ITopoOptions) => Promise<ITopoContext>;
export declare const getGraph: (manifests: IPackageJson[]) => {
    nodes: string[];
    edges: [string, string | undefined][];
};
export declare const getManifestsPaths: ({ workspaces, cwd }: ITopoOptionsNormalized) => Promise<string[]>;
export declare const slash: (path: string) => string;

"use strict";
import toposort from "toposort";
import glob from "fast-glob";
import { dirname, join, relative, resolve } from "path";
import { promises as fs } from "fs";
const readJsonFile = async (filepath) => JSON.parse(await fs.readFile(filepath, "utf8"));
export const getPackages = async (options) => {
  const filter = options.filter || ((_) => true);
  const manifestsPaths = await getManifestsPaths(options);
  const manifests = await Promise.all(
    manifestsPaths.map((p) => readJsonFile(p))
  );
  checkDuplicates(manifests);
  return manifests.reduce((m, p, i) => {
    const absPath = dirname(manifestsPaths[i]);
    const relPath = relative(options.cwd, absPath);
    const entry = {
      name: p.name,
      manifest: p,
      manifestPath: manifestsPaths[i],
      path: relPath,
      relPath,
      absPath
    };
    if (filter(entry)) {
      m[p.name] = entry;
    }
    return m;
  }, {});
};
const checkDuplicates = (manifests) => {
  const duplicates = manifests.map((m) => m.name).filter((e, i, a) => a.indexOf(e) !== i);
  if (duplicates.length > 0) {
    throw new Error(`Duplicated pkg names: ${duplicates.join(", ")}`);
  }
};
export const getRootPackage = async (cwd) => {
  const manifestPath = resolve(cwd, "package.json");
  const manifest = await readJsonFile(manifestPath);
  return {
    name: manifest.name,
    manifest,
    manifestPath,
    path: "/",
    relPath: "/",
    absPath: dirname(manifestPath)
  };
};
export const topo = async (options = {}) => {
  const { cwd = process.cwd(), filter = (_) => true } = options;
  const root = await getRootPackage(cwd);
  const _options = {
    cwd,
    filter,
    workspaces: options.workspaces || root.manifest.workspaces || []
  };
  const packages = await getPackages(_options);
  const { edges, nodes } = getGraph(
    Object.values(packages).map((p) => p.manifest)
  );
  const queue = toposort.array(nodes, edges);
  return {
    queue,
    packages,
    edges,
    nodes,
    root
  };
};
export const getGraph = (manifests) => {
  const nodes = manifests.map(({ name }) => name).sort();
  const edges = manifests.reduce((edges2, pkg) => {
    Object.keys({
      ...pkg.dependencies,
      ...pkg.devDependencies,
      ...pkg.optionalDependencies,
      ...pkg.peerDependencies
    }).forEach(
      (_name) => nodes.includes(_name) && edges2.push([_name, pkg.name])
    );
    return edges2;
  }, []).sort();
  return {
    edges,
    nodes
  };
};
export const getManifestsPaths = async ({
  workspaces,
  cwd
}) => await glob(
  workspaces.map((w) => slash(join(w, "package.json"))),
  {
    cwd,
    onlyFiles: true,
    absolute: true
  }
);
export const slash = (path) => {
  const isExtendedLengthPath = /^\\\\\?\\/.test(path);
  const hasNonAscii = /[^\u0000-\u0080]+/.test(path);
  if (isExtendedLengthPath || hasNonAscii) {
    return path;
  }
  return path.replace(/\\/g, "/");
};
